import{isNullOrWhiteSpaces as i,elementIsExistWithLog as u}from"./general.js";export var SubmenuOpenIvents=(e=>(e[e.Click=0]="Click",e[e.Hover=1]="Hover",e))(SubmenuOpenIvents||{});const s=class{constructor(t,...e){i(t.menuActiveClass,t.buttonActiveClass)&&console.log("[Submenu] Please specify the classes for the elements when they are active."),s.buttonActiveClass=t.buttonActiveClass,s.menuActiveClass=t.menuActiveClass,s.submenuElements.push(...e),t.disableOnEsc&&document.addEventListener("keydown",n=>n.code=="Escape"?s.hideAllClickSubmenu():!1)}static showOrHideSubmenu(t,e){for(let n=0;n<t.buttonElements.length;n++)t.buttonElements[n]==e?(t.buttonElements[n].classList.toggle(s.buttonActiveClass),t.menuElements[n].classList.toggle(s.menuActiveClass)):(t.buttonElements[n].classList.remove(s.buttonActiveClass),t.menuElements[n].classList.remove(s.menuActiveClass))}static hideAllClickSubmenu(){for(let t of s.submenuElements)if(t.openIvent==0)for(let e=0;e<t.buttonElements.length;e++)t.buttonElements[e].classList.remove(s.buttonActiveClass),t.menuElements[e].classList.remove(s.menuActiveClass)}};let l=s;l.submenuElements=new Array;export{l as default};export class SubmenuElementGroup{constructor(t){if(!!u("SubmenuElementGroup",t.buttonsSelector,t.menusSelector))switch(this.menuElements=document.querySelectorAll(t.menusSelector),this.buttonElements=document.querySelectorAll(t.buttonsSelector),this.openIvent=t.openIvent,this.openIvent){case 1:for(let e of this.buttonElements){let n=e.parentElement;e.addEventListener("focus",()=>l.showOrHideSubmenu(this,e)),e.addEventListener("focusout",()=>l.showOrHideSubmenu(this,e)),e.addEventListener("mouseenter",()=>l.showOrHideSubmenu(this,e)),n.addEventListener("mouseleave",()=>l.showOrHideSubmenu(this,e))}break;default:for(let e of this.buttonElements)e.addEventListener("click",()=>l.showOrHideSubmenu(this,e));break}}}
